// <auto-generated />
using System;
using APiUsers.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APiUsers.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250924000559_Operation")]
    partial class Operation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Operations", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationId"), 1L, 1);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OperationId");

                    b.HasIndex("RecordId");

                    b.HasIndex("UserId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupervisorID")
                        .HasColumnType("int");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientID");

                    b.HasIndex("SupervisorID");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.RecordPatients", b =>
                {
                    b.Property<int>("RecurdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecurdId"), 1L, 1);

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TechnicianiD")
                        .HasColumnType("int");

                    b.HasKey("RecurdId");

                    b.HasIndex("PatientID");

                    b.ToTable("RecordPatients");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.RecordRequestTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.HasIndex("RequestTestId");

                    b.ToTable("RecordRequestTests");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Recuests", b =>
                {
                    b.Property<int>("RecuestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecuestID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RecuestID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserID");

                    b.ToTable("recuests");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.RequestTest", b =>
                {
                    b.Property<int>("RequestTestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestTestID"), 1L, 1);

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("RequestTestID");

                    b.HasIndex("RequestID");

                    b.HasIndex("TestID");

                    b.ToTable("RequestTest");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.SettingSystem", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingID"), 1L, 1);

                    b.Property<string>("Addrees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descraption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingID");

                    b.ToTable("SettingSystem");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("NormalRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TestNameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TestNameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Testprice")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.TestCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategoryNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("TestCategories");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.TestResult", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LabTechniciansUserID")
                        .HasColumnType("int");

                    b.Property<int>("RequestTestID")
                        .HasColumnType("int");

                    b.Property<string>("ResultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("ResultID");

                    b.HasIndex("LabTechniciansUserID");

                    b.HasIndex("RequestTestID");

                    b.HasIndex("TestId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Operations", b =>
                {
                    b.HasOne("مشروع_ادار_المختبرات.Models.Patient", "Patients")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("مشروع_ادار_المختبرات.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Patient", b =>
                {
                    b.HasOne("مشروع_ادار_المختبرات.Models.Users", "Supervisor")
                        .WithMany("SupervisedPatients")
                        .HasForeignKey("SupervisorID");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.RecordPatients", b =>
                {
                    b.HasOne("مشروع_ادار_المختبرات.Models.Patient", "Patient")
                        .WithMany("RecordPatients")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.RecordRequestTest", b =>
                {
                    b.HasOne("مشروع_ادار_المختبرات.Models.RecordPatients", "Record")
                        .WithMany("RecordRequestTests")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("مشروع_ادار_المختبرات.Models.RequestTest", "RequestTest")
                        .WithMany()
                        .HasForeignKey("RequestTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");

                    b.Navigation("RequestTest");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Recuests", b =>
                {
                    b.HasOne("مشروع_ادار_المختبرات.Models.Patient", "Patient")
                        .WithMany("recuestTests")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("مشروع_ادار_المختبرات.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.RequestTest", b =>
                {
                    b.HasOne("مشروع_ادار_المختبرات.Models.Recuests", "Request")
                        .WithMany("RequestTests")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("مشروع_ادار_المختبرات.Models.Test", "Test")
                        .WithMany("RecuestTests")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Test", b =>
                {
                    b.HasOne("مشروع_ادار_المختبرات.Models.TestCategory", "TestCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCategory");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.TestResult", b =>
                {
                    b.HasOne("مشروع_ادار_المختبرات.Models.Users", "LabTechnician")
                        .WithMany()
                        .HasForeignKey("LabTechniciansUserID");

                    b.HasOne("مشروع_ادار_المختبرات.Models.RequestTest", "RequestTest")
                        .WithMany("TestResults")
                        .HasForeignKey("RequestTestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("مشروع_ادار_المختبرات.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabTechnician");

                    b.Navigation("RequestTest");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Users", b =>
                {
                    b.HasOne("مشروع_ادار_المختبرات.Models.Roles", "Roles")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Patient", b =>
                {
                    b.Navigation("RecordPatients");

                    b.Navigation("recuestTests");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.RecordPatients", b =>
                {
                    b.Navigation("RecordRequestTests");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Recuests", b =>
                {
                    b.Navigation("RequestTests");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.RequestTest", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Roles", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Test", b =>
                {
                    b.Navigation("RecuestTests");
                });

            modelBuilder.Entity("مشروع_ادار_المختبرات.Models.Users", b =>
                {
                    b.Navigation("SupervisedPatients");
                });
#pragma warning restore 612, 618
        }
    }
}
